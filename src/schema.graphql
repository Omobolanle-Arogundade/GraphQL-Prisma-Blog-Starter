    # import UserOrderByInput, CommentOrderByInput, PostOrderByInput from './generated/prisma.graphql'
    type Query {
        me: User!
        posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
        myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
        post(id: ID!): Post!
        users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
        comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    }

    type Mutation {
        createUser(data: CreateUserInput!): AuthPayload!
        deleteUser: User!
        updateUser(data: UpdateUserInput!): User!
        loginUser(data: LoginUserInput!): AuthPayload!

        createPost(title: String!, body: String!, published: Boolean!): Post!
        deletePost(id: ID!): Post!
        updatePost(id: ID!, data: UpdatePostInput!): Post!

        createComment(text: String!, postID: ID!): Comment!
        deleteComment(id: ID!): Comment!
        updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    }

    type Subscription {
        comment(postID: ID!): CommentSubscriptionPayload!
        post: PostSubscriptionPayload!
        myPost: PostSubscriptionPayload!
    }


    type AuthPayload {
        token: String!
        user: User!
    }

    input CreateUserInput {
        name: String!
        email: String!
        password: String!
        age: Int
    }


    input LoginUserInput {
        email: String!
        password: String!
    }

    input UpdateUserInput {
        name: String
        email: String
        age: Int
        password: String
    }

    input UpdatePostInput {
        title: String
        body: String
        published: Boolean
    }

    input UpdateCommentInput {
        text: String
    }

    type User {
        id: ID!
        name: String!
        email: String
        password: String!
        age: Int
        posts: [Post!]!
        comments: [Comment!]!
        createdAt: String!
        updatedAt: String!
    }

    enum MutationTypes {
        CREATED
        UPDATED
        DELETED
    }

    type Post {
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        author: User!
        comments: [Comment!]!
        createdAt: String!
        updatedAt: String!
    }

    type PostSubscriptionPayload {
        mutation: MutationTypes!
        node: Post
    }



    type Comment {
        id: ID!
        author: User!
        text: String!
        post: Post!
        createdAt: String!
        updatedAt: String!
    }

    type CommentSubscriptionPayload {
        mutation: MutationTypes!
        node: Comment
    }